require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const keybord = require('./keyboards');
var exec = require('child_process').exec;
const {exit} = require('process');
const process = require("process");

let isNewSessionPC = true;

const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, {polling: true});

process.on('exit', (code) => {
    console.log(`About to exit with code: ${code}`);
});

bot.onText(/\/echo (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const resp = match[1];
    bot.sendMessage(chatId, resp);
});

bot.on('callback_query', (query) => {
    const chatId = query.from.id;
    bot.sendMessage(chatId, `–æ–∫–µ–π, –∑–∞–ø—É—Å–∫–∞—é ${query.data} üëÄ`);
    switch (query.data) {
        case 'shutdown' :
            exec('shutdown.exe -s -t 10', function () {
                console.log('shutdown.exe -s -t 10');
                exit(-1);
            });
            break;
        case 'reboot' :
            exec('shutdown.exe -r -t 10', function () {
                console.log('shutdown.exe -r -t 10');
                exit(-1);
            });
            break;
        case 'sleepMode' :
            exec('rundll32 powrprof.dll,SetSuspendState', function () {
                console.log('rundll32 powrprof.dll,SetSuspendState')
            });
            break;
    }
});

bot.on('message', async (msg) => {
    const messageID = msg.message_id;
    const chatId = msg.chat.id;
    if(isNewSessionPC){
        isNewSessionPC = false;
        await bot.sendSticker(chatId,'https://tlgrm.ru/_/stickers/629/439/62943973-f1e5-422a-91ff-0436fd9c9722/33.webp');
    }
    if (msg.chat.username === 'calmfish') {
        if (msg.text) {
            if ((msg.text.toLowerCase() === '–ø–∫' ||
                msg.text.toLowerCase() === '–æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π üíÅüèª') && msg.message_id === messageID) {
                await bot.sendMessage(chatId, '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å –ü–ö ?', keybord.pcMenu);
            }
            if ((msg.text !== '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π üíÅüèª' && msg.text !== '–ó–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ü§ì')) {
                bot.sendMessage(chatId, '–Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª, –Ω–æ —á–µ—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ —Ç—ã' +
                    ' —Ö–æ—á–µ—à—å ü§® üòë, –ø–æ—ç—Ç–æ–º—É –æ—Ç—Ä–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É');
                bot.sendMessage(chatId, '–û—Ç–∫—Ä—ã–≤–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É', keybord.mainMenuOptions)
            }
        } else {
            const stream = bot.getFileStream(msg.voice.file_id);
            let chunks = [];
            stream.on('data', chunk => chunks.push(chunk));
            stream.on('end', () => {
                const axiosConfig = {
                    method: 'POST',
                    url: 'https://stt.api.cloud.yandex.net/speech/v1/stt:recognize',
                    headers: {
                        Authorization: 'Api-key ' + process.env.YA_API_KEY,
                    },
                    data: Buffer.concat(chunks),
                };
                axios(axiosConfig).then(async response => {
                    const command = response.data.result;
                    const chatId = msg.chat.id;
                    switch (command.toLowerCase()) {
                        case '–≤—ã–∫–ª—é—á–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä' :
                            await bot.sendMessage(chatId, '–í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä!');
                            await bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/629/439/62943973-f1e5-422a-91ff-0436fd9c9722/19.webp');
                            exec('shutdown.exe -s -t 00', function () {
                                console.log('shutdown.exe -s -t 00');
                                exit(-1);
                            });
                            break;
                        case '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä!' :
                            await bot.sendMessage(chatId, '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä');
                            await bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/629/439/62943973-f1e5-422a-91ff-0436fd9c9722/8.webp');
                            exec('shutdown.exe -r -t 10', function () {
                                console.log('shutdown.exe -s -t 00');
                                exit(-1);
                            });
                            break;
                        case '–ø–µ—Ä–µ–π–¥–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º' :
                            await bot.sendMessage(chatId, '–ü–µ—Ä–µ–≤–æ–∂—É –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º!');
                            await bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/629/439/62943973-f1e5-422a-91ff-0436fd9c9722/21.webp')
                            exec('rundll32 powrprof.dll,SetSuspendState', function () {
                                console.log('shutdown.exe -s -t 00')
                            });
                            break;
                        default :
                            await bot.sendMessage(chatId, '–ù–µ –ø–æ–Ω—è–ª');
                            await bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/629/439/62943973-f1e5-422a-91ff-0436fd9c9722/20.webp')
                            break;
                    }
                }).catch((err) => {
                    console.log("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏! :", err.response);
                })
            });
        }
    } else {
        await bot.sendMessage(chatId, `–ú–æ–π —Ö–æ–∑—è–∏–Ω –î–µ–Ω–∏—Å –†—ã–±–∫–∏–Ω, –∞ ${msg.from.first_name} ${msg.from.last_name} –Ω–µ –±—É–¥–µ—Ç –º–Ω–æ–π —É–ø—Ä–∞–≤–ª—è—Ç—åü§¨`);
        await bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/629/439/62943973-f1e5-422a-91ff-0436fd9c9722/27.webp');
        await bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/fab/e9f/fabe9f3a-d6ad-4d45-8e0d-478f9278d228/3.webp');
    }
});
bot.on("polling_error", console.log);