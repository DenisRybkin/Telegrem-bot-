const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
var exec = require('child_process').exec;
const { exit } =  require('process');

const token = '1948505395:AAFVQ1EaHy8FeEggsX-aphXCIaIUE3PGN1w';
const YA_API_KEY = 'AQVNzdbALO0k749vmkj7UJV89nSr4OUeEIiunQRU';

const bot = new TelegramBot(token, {polling: true});

process.on('exit', (code) => {
    console.log(`About to exit with code: ${code}`);
});

bot.onText(/\/echo (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const resp = match[1];
    bot.sendMessage(chatId, resp);
});


bot.on('message', (msg) => {
    const messageID = msg.message_id;
    const chatId = msg.chat.id;
    if(msg.chat.username === 'calmfish'){
        if(msg.text){
            if((msg.text.toLowerCase() === '–ø–∫' ||
                msg.text.toLowerCase() === '–æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π üíÅüèª') && msg.message_id === messageID){
                msg.text = 'pusto';
                bot.sendMessage(chatId , '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å –ü–ö ?', {
                    reply_markup :{
                        inline_keyboard : [
                            [
                                {
                                    text: '–í—ã–∫–ª—é—á–∏—Ç—å üôÜüèª',
                                    callback_data : 'shutdown',
                                }
                            ],
                            [
                                {
                                    text : '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å üëÄ',
                                    callback_data : 'reboot',
                                }
                            ],
                            [
                                {
                                    text: '–°–ø—è—â–∏–π —Ä–µ–∂–∏–º üíÜüèª',
                                    callback_data: 'sleepMode',
                                }
                            ],
                            [
                                {
                                    text: '–û—Ç–º–µ–Ω–∞! üôÖüèª',
                                    callback_data: 'cancel',
                                }
                            ]
                        ],
                    }
                });
            }
            if(msg.text === 'pusto'){
                return;
            }
            if((msg.text !== '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π üíÅüèª' && msg.text !== '–ó–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ü§ì')) {
                bot.sendMessage(chatId, '–Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª, –Ω–æ —á–µ—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ —Ç—ã' +
                    ' —Ö–æ—á–µ—à—å ü§® üòë, –ø–æ—ç—Ç–æ–º—É –æ—Ç—Ä–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É');
                bot.sendMessage(chatId, '–û—Ç–∫—Ä—ã–≤–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É', {
                    reply_markup : {
                        keyboard : [
                            [
                                {text : '–ó–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ü§ì',},
                                {
                                    text: '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π üíÅüèª',
                                    callback_data: 'openMenu',
                                }
                            ]
                        ],
                        one_time_keyboard : true,
                    }
                })
            }
            bot.on('callback_query', (query) => {
                const chatId = query.from.id;
                bot.sendMessage(chatId, `–æ–∫–µ–π, –∑–∞–ø—É—Å–∫–∞—é ${query.data} üëÄ`);
                if(query.data === 'shutdown'){
                    exec('shutdown.exe -s -t 10', function(error, stdout, stderr) {
                        console.log('shutdown.exe -s -t 10');
                        exit(-1);
                    });
                }
                if(query.data === 'reboot'){
                    exec('shutdown.exe -r -t 10', function(error, stdout, stderr) {
                        console.log('shutdown.exe -r -t 10');
                        exit(-1);
                    });
                }
                if(query.data === 'sleepMode'){
                    exec('rundll32 powrprof.dll,SetSuspendState', function(error, stdout, stderr) {
                        console.log('rundll32 powrprof.dll,SetSuspendState')
                    });
                }
                if(query.data === 'cancel'){
                    bot.deleteMessage(chatId, query.message.message_id);
                    bot.sendMessage(query.from.id, '–û—Ç–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞! ü§∑üèª');
                }
            });
        }else {
            const stream = bot.getFileStream(msg.voice.file_id);
            let chunks = [];
            stream.on('data', chunk => chunks.push(chunk));
            stream.on('end', () => {
                const axiosConfig = {
                    method: 'POST',
                    url: 'https://stt.api.cloud.yandex.net/speech/v1/stt:recognize',
                    headers : {
                        Authorization : 'Api-key ' + YA_API_KEY,
                    },
                    data : Buffer.concat(chunks),
                };
                axios(axiosConfig).then(response => {
                    const command =  response.data.result;
                    const chatId = msg.chat.id;
                    if(command.toLowerCase() === '–≤—ã–∫–ª—é—á–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä'){
                        bot.sendMessage(chatId, '–í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä!');
                           exec('shutdown.exe -s -t 00', function(error, stdout, stderr) {
                            console.log('shutdown.exe -s -t 00');
                            exit(-1);
                        });
                    }
                    if(command.toLowerCase() === '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä!'){
                        bot.sendMessage(chatId, '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä');
                        exec('shutdown.exe -r -t 10', function(error, stdout, stderr) {
                            console.log('shutdown.exe -s -t 00');
                            exit(-1);
                        });
                    }
                    if(command.toLowerCase() === '–ø–µ—Ä–µ–π–¥–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º'){
                        bot.sendMessage(chatId, '–ü–µ—Ä–µ–≤–æ–∂—É –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º!');
                        exec('rundll32 powrprof.dll,SetSuspendState', function(error, stdout, stderr) {
                            console.log('shutdown.exe -s -t 00')
                        });
                    }
                    else {
                        bot.sendMessage(chatId, '–ù–µ –ø–æ–Ω—è–ª —á–µ —Ç—ã —Ö–æ—á–µ—à—å???!');
                    }
                }).catch((err) => {
                    console.log("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏! :", err.response);
                })
            });
        }
    } else {
        bot.sendMessage(chatId, '–í—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –º–Ω–æ–π —É–ø—Ä–∞–≤–ª—è—Ç—åü§¨');
    }

});
bot.on("polling_error", console.log)